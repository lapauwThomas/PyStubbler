'''
Stubs generated by PyStubbler version [1.0.8216.28667]
Date: Thursday, 30 June 2022 15:55

Namespace: PyStubblerTestAssembly

In Assembly: PyStubblerTestAssembly

'''

__all__ = ['namespace2']
from typing import Tuple, Set, Iterable, List
from typing import Dict, Callable, Any


class ANestedPublicClass:
#Constructors
    def __init__(self): ...

#Class Methods


class MyCustomEventArgs:
#Class variables (static)
    Empty: Any

#Constructors
    def __init__(self): ...

#Class Methods


class MyEmptyClass:
#Class Methods


class MyTestClass:
#Class variables (static)
    StaticPublicStringField: str
    StaticPublicIntField: int
    StaticPublicStringListField: List[str]
    StaticPublicIntListField: List[int]

#Instance variables (non-static)
    myPublicStringField: str
    myPublicIntField: int
    myPublicStringListField: List[str]
    myPublicIntListField: List[int]
    myDictionartyStringInt: Dict[str, int]
    simpleEventHandlerField: Any
    ReadonlyIntList: List[int]

#EventHandlers
    EventHandlerFieldAsProp: Callable[[Any, MyCustomEventArgs], None]    # void function(object sender, PyStubblerTestAssembly.MyCustomEventArgs args) 

#Constructors
    @overload
    def __init__(self): ...

    @overload
    def __init__(self, extraParam: str): ...

#Static Properties
    @property
    def staticIntegerProperty() -> int: ...

    @staticIntegerProperty.setter
    def staticIntegerProperty(value: int) -> None: ...


#Properties
    @property
    def IntegerProperty(self) -> int: ...

    @IntegerProperty.setter
    def IntegerProperty(self, value: int) -> None: ...

    @property
    def IntegerPropertyPrivateSet(self) -> int: ...

    @IntegerPropertyPrivateSet.setter
    def IntegerPropertyPrivateSet(self, value: int) -> None: ...

    @property
    def IntegerPropertyOnlyGet(self) -> int: ...


#Class Methods
    def IGiveYouADouble(self) -> float: ...

    def IGiveYouAFloat(self) -> Any: ...

    def IMakeAListOfListsofStrings(self) -> List[List[str]]: ...

    def IMakeAnArrayOfDoubles(self) -> List[float]: ...

    def MethodUsingNestedPublicClass(self, classinst: ANestedPublicClass) -> ANestedPublicClass: ...

    def MyOtherClassCreator(self, classinst: ANestedPublicClass) -> MyOtherClass: ...

    @overload
    @staticmethod
    def MyStaticFunction() -> None: ...

    @overload
    @staticmethod
    def MyStaticFunction(s: str) -> None: ...

    @overload
    @staticmethod
    def MyStaticFunction(strings: Iterable[str]) -> None: ...

