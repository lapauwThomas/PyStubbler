'''
Stubs generated by PyStubbler version [1.0.8278.32530]
Date: Wednesday, 31 August 2022 18:04

Namespace: UserLibrary

In Assembly: TgcUserLibrary

'''

__all__ = ['DataTypes','Device','Utils']
from typing import Tuple, Set, Iterable, List, overload, Dict, Callable, Any
from UserLibrary.Device import TgcDevice



class CustomConsoleLogger:
#Class variables (static)
    Null: Any

#EventHandlers
    WriteCallbacks: Callable[[Any, CustomLoggerEventArgs], None]    # void function(object sender, UserLibrary.CustomConsoleLogger+CustomLoggerEventArgs args) 

#Constructors
    def __init__(self, console: Any): ...

#Properties
    @property
    @Encoding.setter
    def Encoding(self) -> Any: ...


#Class Methods
    @overload
    def Write(self, value: str) -> None: ...

    @overload
    def WriteLine(self, value: str) -> None: ...



class CustomLoggerEventArgs:
#Class variables (static)
    Empty: Any

#Properties
    @property
    @Message.setter
    def Message(self) -> str: ...

    @Message.setter
    def Message(self, value: str) -> None: ...

    @property
    @TimestampString.setter
    def TimestampString(self) -> str: ...

    @TimestampString.setter
    def TimestampString(self, value: str) -> None: ...


#Class Methods


class DaemonClient:
#Class variables (static)
    ThrowExceptions: bool
    PrintExeptions: bool

#Static Properties
    @property
    @staticmethod
    def CurrentVersion() -> Any: ...

    @property
    @staticmethod
    def LibraryVersion() -> str: ...


#Properties
    @property
    @PreviewWindow.setter
    def PreviewWindow(self) -> PreviewWindowControl: ...

    @PreviewWindow.setter
    def PreviewWindow(self, value: PreviewWindowControl) -> None: ...

    @property
    @Initialized.setter
    def Initialized(self) -> bool: ...

    @Initialized.setter
    def Initialized(self, value: bool) -> None: ...

    @property
    @CloseDaemonOnClientDisconnect.setter
    def CloseDaemonOnClientDisconnect(self) -> bool: ...

    @CloseDaemonOnClientDisconnect.setter
    def CloseDaemonOnClientDisconnect(self, value: bool) -> None: ...

    @property
    @Device.setter
    def Device(self) -> TgcDevice: ...

    @Device.setter
    def Device(self, value: TgcDevice) -> None: ...


#Class Methods
    def Dispose(self) -> None: ...

    def GetDeviceList(self) -> List[str]: ...

    @overload
    @staticmethod
    def GetInstance() -> DaemonClient: ...

    @overload
    @staticmethod
    def GetInstance(daemonPath: str) -> DaemonClient: ...

    def ShowDaemon(self) -> None: ...



class DaemonClientLogging:
#Class variables (static)
    WriteDaemonLogToConsole: bool
    OnLogMessage: Any
    OnMessage: Any

#Static EventHandlers
    ConsoleLogEventHandler: Callable[[Any, CustomLoggerEventArgs], None])    # void function(object sender, UserLibrary.CustomConsoleLogger+CustomLoggerEventArgs args) 
    DaemonLogMessageEventHandler: Callable[[Any, CustomLoggerEventArgs], None])    # void function(object sender, UserLibrary.CustomConsoleLogger+CustomLoggerEventArgs args) 

#Class Methods
    @staticmethod
    def WriteCallback(message: str) -> None: ...



class DaemonStatusMonitor:
#Static EventHandlers
    OnDaemonUnavailable: Callable[[Any, Any], None])    # void function(object sender, System.EventArgs args) 

#Static Properties
    @property
    @staticmethod
    def TriesBeforeUnavailable() -> int: ...

    @staticmethod
    def TriesBeforeUnavailable(value: int) -> None: ...

    @property
    @staticmethod
    def DaemonAvailable() -> bool: ...

    @staticmethod
    def DaemonAvailable(value: bool) -> None: ...

    @property
    @staticmethod
    def MonitorRunning() -> bool: ...

    @property
    @staticmethod
    def Interval() -> float: ...

    @staticmethod
    def Interval(value: float) -> None: ...


#Class Methods
    @staticmethod
    def DaemonRunning() -> bool: ...

    @staticmethod
    def GetDaemonPID() -> int: ...

    @staticmethod
    def KillDaemon() -> None: ...

    @staticmethod
    def StartDaemon(timeout: int) -> bool: ...

    @staticmethod
    def WaitForDaemon(tries: int, timeBetweenTries: int) -> bool: ...



class PreviewWindowControl:
#Properties
    @property
    @PreviewUpperBoundary.setter
    def PreviewUpperBoundary(self) -> int: ...

    @property
    @PreviewLowerBoundary.setter
    def PreviewLowerBoundary(self) -> int: ...


#Class Methods
    def Show(self) -> None: ...


